h2. Rails アプリケーションの設定

このガイドでは、Railsアプリケーションに利用できる、設定と初期化について説明します。このガイドを読むことで、以下のことが行えるようになります:

* Railsアプリケーションの動作を調整できる
* アプリケーションの起動時に、追加のコードを実行させる

endprologue.

h3. 初期化用コードの記述箇所

Railsでは初期化用コードを(少なくとも)5カ所で記述できるようになっています:

* Preinitializers
* environment.rb
* 環境固有の設定ファイル
* Initializers (load_application_initializers)
* After-Initializers

h3. Preinitializerの利用

Railsでは、preinitializerという機能があります。これは、Active RecordやAction Packなどのフレームワークの読み込みの前に実行される初期化です。実行したいコードを+RAILS_ROOT/config/preinitializer.rb+というファイルで作成します。こうするとサービスの起動時に真っ先にこのファイルがロードされ、その後、Railsのフレームワークが読み込まれます。初期化プロセスの中で使用するクラスの振る舞いを変更することも、このファイルに記述することで実現できます。

h3. Railsコンポーネントの設定

Railsの設定は、Rails本体だけでなく、各コンポーネントに対しても行います。+environment.rb+や環境特化設定ファイル(+config/environments/production.rb+ など)では、各コンポーネントの設定をいろいろと行うことができます。例えば、Rails 2.3におけるデフォルトの +environment.rb+ には以下のような記述があります:

<ruby>
config.time_zone = 'UTC'
</ruby>

これはRailsそのものに対する設定ですが、+config+ オブジェクトを介する事で個々のコンポーネントの設定も記述可能です:

<ruby>
config.active_record.colorize_logging = false
</ruby>

この記述は、Active Recordの設定に利用されます。

h4. Rails の一般的な設定

* +config.routes_configuration_file+ にはルーチング設定ファイルのデフォルトパスを設定します。デフォルトは +config/routes.rb.rb+ です。

* +config.cache_classes+ にはアプリケーションのクラスをリクエスト毎にリロードするかどうかを設定します。

* +config.cache_store+ にはキャッシュの保存方法を指定します。+:memory_store+、 +:file_store+、 +:mem_cache_store+、ユーザ定義のクラス名が選択可能です。

* +config.controller_paths+ では、コントローラとして探索対象となるパスを配列で指定します。デフォルトは +app/controllers+ です。

* +config.database_configuration_file+ では、データベースの設定ファイルのデフォルトパスを指定します。デフォルトは +config/database.yml+ です。

* +config.dependency_loading+ では dependency loading の有効/無効を指定します。_true_ にした場合、リクエストの度に新しいクラスのロードを行います。_false_ にした場合、このような動作を行いません。

* +config.eager_load_paths+ では、ブート時にeager loadするパスを配列で指定します。これには、cache classesが有効であり、かつ、この配列中のパスが全て +load_paths+ の中にも含まれている必要があります。

* +config.frameworks+ では、Railsのコンポーネントのうち、読み込むものを配列で指定します(デフォルトでは +:active_record+、 +:action_controller+、 +:action_view+、 +:action_mailer+、 +:active_resource+)。 

* +config.load_once_paths+ には、Railsが自動ロードを一度だけ行うパスを配列で指定できます。この配列中のパスは、+load_paths+ の中にも含まれている必要があります。

* +config.load_paths+ では、Railsが読み込むパスを配列で指定できます。デフォルトでは、すべてのapp、lib、vendor、 mock のパスがリストに含まれています。

* +config.log_level+ ではRailsのログ機能の詳細さを指定します。デフォルト値は、production モードでは +:info+ 、development モードでは +:debug+ です。 

* +config.log_path+ はログファイルの保存場所を指定します。デフォルトでは +log/#{environment}.log+ が使用されます(例. log/development.log や log/production.log など)。 

* +config.logger+ では、ログ機能を Log4r か Ruby 1.8+ の Logger クラスのインタフェースに合わせることができます。これらはAction Controllerの情報のログを取るときに使用されます。nil を指定した場合、ログ機能は無効になります。

* +config.metals+ はロードする metal を配列で指定します。nil がセットされた場合、全 metal がアルファベット順にロードされます。[] がセットされた場合、metal は読み込まれません。これ以外の場合、指定された順番通りにロードされます。

* +config.plugin_loader+ は、各プラグインのロードを管理するクラスを指定します。デフォルトは +Rails::Plugin::Loader+ です。

* +config.plugin_locators+ は、アプリケーションにロードするプラグインを探すクラスを指定します。デフォルトでは +Rails::Plugin::FileSystemLocator+ です。

* +config.plugin_paths+ はプラグインのディレクトリのルートパスを指定します。デフォルトは +vendor/plugins+ です。

* +config.plugins+ は読み込むプラグインのリストを指定します。nilがセットされた場合、全プラグインがロードされます。[]がセットされた場合、プラグインは読み込まれません。これ以外の場合、指定された順番通りにプラグインがロードされます。

* +config.preload_frameworks+ は起動時に全てのフレームワークをロードするかどうかを指定します。

* +config.reload_plugins+ はプラグインの再読み込みを行うかどうかを指定します。

* +config.root_path+ はアプリケーションのルートパスを設定します。

* +config.time_zone+ には、アプリケーションのデフォルトのタイムゾーンを指定します。この情報は Active Record からも参照されます。

* +config.view_path+ には、アプリケーションのビューのルートパスを指定します。デフォルトは +app/views+ です。

* +config.whiny_nils+ は nil のメソッドが実行されたときに警告を出すかどうかをを指定します。デフォルトでは _false_ です。

h4. i18n の設定

* +config.i18n.default_locale+ には、デフォルトの i18n のロケール(地域)を指定します。デフォルトでは、 +:en+ です。

* +config.i18n.load_path+ には、ロケール用ファイルのパスを指定します。デフォルトでは +config/locales/*.{yml,rb}+ です。

h4. Active Record の設定

<tt>config.active_record</tt> からは様々な設定が可能です:

* +config.active_record.logger+ では、ログ機能を Log4r か　Ruby 1.8.x の Logger クラスのインタフェースに合わせることができます。データベースのコネクションが新しく作られるたびに、この情報は参照されます。このロガーは、Active Record のクラスとインスタンスの両方から、+logger+ によって参照できます。nil を指定した場合は、ログ機能を無効にします。

* +config.active_record.primary_key_prefix_type+ は、主キー(の列名)の名前の付け方を変更できます。デフォルトでは、 +id+ という名前です(そのため、この設定項目は必須ではありません)。他に2つの選択肢があります:
** +:table_name+ では、Customer クラスの主キーは +customerid+ になります。
** +:table_name_with_underscore+ では、Customer クラスの主キーは +customer_id+ になります。

* +config.active_record.table_name_prefix+ は、テーブル名の先頭につけるグローバルな文字列を指定することができます。例えば +northwest_+ という文字列を設定した場合、Customer クラスのテーブルは +northwest_customers+ であると期待されます。デフォルト値は空文字です。

* +config.active_record.table_name_suffix+ は、テーブル名の後ろにつけるグローバルな文字列を指定することができます。例えば +_northwest+ という文字列を設定した場合、Customer クラスのテーブルは +customers_northwest+ であると期待されます。デフォルト値は空文字です。

* +config.active_record.pluralize_table_names+ は、Railsがデータベース中からテーブルを探すときに、単数形もしくは複数形のどちらで探すかを指定します。+true+ をセットした場合(これがデフォルトです)、Customer クラスのテーブル名は +customers+ になります。+false+ をセットした場合、Customer クラスのテーブル名は +customer+になります。

* +config.active_record.colorize_logging+ (デフォルトではtrue)はActive Recordの情報をログをとるとき、ANSIカラーコードを利用するかどうかを指定します。

* +config.active_record.default_timezone+ は +Time.local+ (+:local+ を指定した場合) か +Time.utc+ (+:utc+ を指定した場合) を選択します。これは、データベースから日付や時刻を取得するときに使用されます。デフォルトで +:local+ です。

* +config.active_record.schema_format+ は、データベーススキーマのダンプファイルの書式を指定します。選択肢は2つです。+:ruby+ (デフォルト) はマイグレーションに依存するデータベース独立のバージョンです。+:sql+ は(潜在的にデータベース依存の) SQL 文の組み合わせです。

* +config.active_record.timestamped_migrations+ は、マイグレーションファイルのナンバリングを、連番にするかタイムスタンプにするかを指定します。デフォルトでは +true+ で、タイムスタンプを使用します。こちらは、同じアプリケーションを複数人で開発するときにおすすめです。

* +config.active_record.lock_optimistically+ は Active Record のロックを楽観的ロックにするかどうかを選択します。デフォルトでは +true+ です。

MySQL アダプタには、追加の設定項目を一つ指定できます:

* +ActiveRecord::ConnectionAdapters::MysqlAdapter.emulate_booleans+ は、Active Record が MySQLデータベース中の +tinyint(1)+ のカラムを全てブール値と見なすかどうかを指定します。デフォルトでは +true+ です。

スキーマダンプにも、追加の設定項目を一つ設定できます:

* +ActiveRecord::SchemaDumper.ignore_tables+ には、スキーマのファイルに加えたくないテーブル名を、配列で指定します。この設定は +config.active_record.schema_format == :ruby+ 以外の場合は無視されます。

h4. Action Controller の設定

<tt>config.action_controller</tt> には多くの設定項目があります:

* +config.action_controller.asset_host+ provides a string that is prepended to all of the URL-generating helpers in +AssetHelper+. これにより、javascript、CSS、画像のファイルを外部のasset hostに配置することが可能になります。

* +config.action_controller.consider_all_requests_local+ は通常、developmentの場合では +true+ 、productionの場合では +false+ になっています; この値を +true+ にした場合、エラー時には詳細なデバッグ情報をHTTPリクエストとして返します。細かく制御するには、この値を +false+ にし、詳細なデバッグ情報を出力したいコントローラに+local_request?+ メソッドを実装してください。

* +config.action_controller.allow_concurrency+ should be set to +true+ to allow concurrent (threadsafe) action processing. Set to +false+ by default. You probably don't want to call this one directly, though, because a series of other adjustments need to be made for threadsafe mode to work properly. Instead, you should simply call +config.threadsafe!+ inside your +production.rb+ file, which makes all the necessary adjustments.

WARNING: Threadsafe operation in incompatible with the normal workings of development mode Rails. In particular, automatic dependency loading and class reloading are automatically disabled when you call +config.threadsafe!+.

* +config.action_controller.param_parsers+ は、HTTPリクエストから情報を抽出して +params+ ハッシュに格納するパーサーを配列で指定します。デフォルトでは、マルチパート・フォーム、URL-エンコード・フォーム、XML、JSONのパーサーが有効になっています。

* +config.action_controller.default_charset+ は、レンダーのデフォルトの文字セットを指定します。デフォルトは "utf-8" です。

* +config.action_controller.logger+ は、ログ機能を Log4r か Ruby 1.8+ のLogger クラスのインタフェースに合わせることができます。このロガーはAction Controllerがログを記録する際に使用されます。nil を指定した場合は、ログ機能を無効にします。

* +config.action_controller.resource_action_separator+ は、リソースとアクションの分割文字を指定します。これはRESTfulなURLの生成や解釈に用いられます。デフォルトでは "/" です。

* +config.action_controller.resource_path_names+ は、一部のRESTfulなアクションのデフォルト名をハッシュで指定します。デフォルトでは、new アクションは +new+、edit アクションは +edit+ になっています。

* +config.action_controller.request_forgery_protection_token+ は、リクエスト偽造(RequestForgery)対策に使用するトークンパラメータの名前を指定します。+protect_from_forgery+ を呼び出す際、デフォルトでは +:authenticity_token+ が使用されます。

* +config.action_controller.optimise_named_routes+ は、ルーチングテーブルの生成の最適機構をオンにします。デフォルトでは +true+ です。

* +config.action_controller.use_accept_header+ sets the rules for determining the response format. If this is set to +true+ (the default) then +respond_to+ and +Request#format+ will take the Accept header into account. If it is set to false then the request format will be determined solely by examining +params[:format]+. If there is no +format+ parameter, then the response format will be either HTML or Javascript depending on whether the request is an AJAX request.

* +config.action_controller.allow_forgery_protection+ enables or disables CSRF protection. By default this is +false+ in test mode and +true+ in all other modes.

* +config.action_controller.relative_url_root+ can be used to tell Rails that you are deploying to a subdirectory. The default is +ENV['RAILS_RELATIVE_URL_ROOT']+.

* +config.action_controller.session_store+ sets the name of the store for session data. The default is +:cookie_store+; other valid options include +:active_record_store+, +:mem_cache_store+ or the name of your own custom class.

The caching code adds two additional settings:

* +ActionController::Base.page_cache_directory+ sets the directory where Rails will create cached pages for your web server. The default is +Rails.public_path+ (which is usually set to +RAILS_ROOT + "/public"+).

* +ActionController::Base.page_cache_extension+ sets the extension to be used when generating pages for the cache (this is ignored if the incoming request already has an extension). The default is +.html+.

Active Recordのセッションストアも設定を行えます:

* +ActiveRecord::SessionStore::Session.table_name+ は、セッションの管理を行うテーブル名を指定します。デフォルトでは、 +sessions+ です。

* +ActiveRecord::SessionStore::Session.primary_key+ は、セッション管理テーブルの主キーの名前を指定します。デフォルトでは、 +session_id+ です。

* +ActiveRecord::SessionStore::Session.data_column_name+ は、セッションのマーシャルデータを格納するカラム名を指定します。デフォルトでは +data+ です。

h4. Configuring Action View

There are only a few configuration options for Action View, starting with four on +ActionView::Base+:

* +config.action_view.debug_rjs+ specifies whether RJS responses should be wrapped in a try/catch block that alert()s the caught exception (and then re-raises it). The default is +false+.

* +config.action_view.warn_cache_misses+ tells Rails to display a warning whenever an action results in a cache miss on your view paths. The default is +false+.

* +config.action_view.field_error_proc+ provides an HTML generator for displaying errors that come from Active Record. The default is <tt>Proc.new{ |html_tag, instance| "<div class=\"fieldWithErrors\">#{html_tag}</div>" }</tt>

* +config.action_view.default_form_builder+ tells Rails which form builder to use by default. The default is +ActionView::Helpers::FormBuilder+.

* +config.action_view.logger+ accepts a logger conforming to the interface of Log4r or the default Ruby 1.8+ Logger class, which is then used to log information from Action Mailer. Set to nil to disable logging.

* +config.action_view.erb_trim_mode+ gives the trim mode to be used by ERB. It defaults to +'-'+. See the "ERB documentation":http://www.ruby-doc.org/stdlib/libdoc/erb/rdoc/ for more information.

h4. Configuring Action Mailer

There are a number of settings available on +config.action_mailer+:

* +config.action_mailer.template_root+ gives the root folder for Action Mailer templates.

* +config.action_mailer.logger+ accepts a logger conforming to the interface of Log4r or the default Ruby 1.8+ Logger class, which is then used to log information from Action Mailer. Set to nil to disable logging.

* +config.action_mailer.smtp_settings+ allows detailed configuration for the +:smtp+ delivery method. It accepts a hash of options, which can include any of these options:
** +:address+ - Allows you to use a remote mail server. Just change it from its default "localhost" setting.
** +:port+ - On the off chance that your mail server doesn't run on port 25, you can change it.
** +:domain+ - If you need to specify a HELO domain, you can do it here.
** +:user_name+ - If your mail server requires authentication, set the username in this setting.
** +:password+ - If your mail server requires authentication, set the password in this setting.
** +:authentication+ - If your mail server requires authentication, you need to specify the authentication type here. This is a symbol and one of +:plain+, +:login+, +:cram_md5+.

* +config.action_mailer.sendmail_settings+ allows detailed configuration for the +sendmail+ delivery method. It accepts a hash of options, which can include any of these options:
** +:location+ - The location of the sendmail executable. Defaults to +/usr/sbin/sendmail+.
** +:arguments+ - The command line arguments. Defaults to +-i -t+.

* +config.action_mailer.raise_delivery_errors+ specifies whether to raise an error if email delivery cannot be completed. It defaults to +true+.

* +config.action_mailer.delivery_method+ defines the delivery method. The allowed values are +:smtp+ (default), +:sendmail+, and +:test+.

* +config.action_mailer.perform_deliveries+ specifies whether mail will actually be delivered. By default this is +true+; it can be convenient to set it to +false+ for testing.

* +config.action_mailer.default_charset+ tells Action Mailer which character set to use for the body and for encoding the subject. It defaults to +utf-8+.

* +config.action_mailer.default_content_type+ specifies the default content type used for the main part of the message. It defaults to "text/plain"

* +config.action_mailer.default_mime_version+ is the default MIME version for the message. It defaults to +1.0+.

* +config.action_mailer.default_implicit_parts_order+ - When a message is built implicitly (i.e. multiple parts are assembled from templates
which specify the content type in their filenames) this variable controls how the parts are ordered. Defaults to +["text/html", "text/enriched", "text/plain"]+. Items that appear first in the array have higher priority in the mail client
and appear last in the mime encoded message.

h4. Configuring Active Resource

There is a single configuration setting available on +config.active_resource+:

* +config.active_resource.logger+ accepts a logger conforming to the interface of Log4r or the default Ruby 1.8+ Logger class, which is then used to log information from Active Resource. Set to nil to disable logging.

h4. Configuring Active Support

There are a few configuration options available in Active Support:

* +config.active_support.escape_html_entities_in_json+ enables or disables the escaping of HTML entities in JSON serialization. Defaults to _true_.

* +config.active_support.use_standard_json_time_format+ enables or disables serializing dates to ISO 8601 format. Defaults to _false_.

* +ActiveSupport::BufferedLogger.silencer+ is set to +false+ to disable the ability to silence logging in a block. The default is +true+.

* +ActiveSupport::Cache::Store.logger+ specifies the logger to use within cache store operations.

* +ActiveSupport::Logger.silencer+ is set to +false+ to disable the ability to silence logging in a block. The default is +true+.

h3. Using Initializers

After it loads the framework plus any gems and plugins in your application, Rails turns to loading initializers. An initializer is any file of ruby code stored under +config/initializers+ in your application. You can use initializers to hold configuration settings that should be made after all of the frameworks and plugins are loaded.

NOTE: You can use subfolders to organize your initializers if you like, because Rails will look into the whole file hierarchy from the +initializers+ folder on down.

TIP: If you have any ordering dependency in your initializers, you can control the load order by naming. For example, +01_critical.rb+ will be loaded before +02_normal.rb+.

h3. Using an After-Initializer

After-initializers are run (as you might guess) after any initializers are loaded. You can supply an +after_initialize+ block (or an array of such blocks) by setting up +config.after_initialize+ in any of the Rails configuration files:

<ruby>
config.after_initialize do
  SomeClass.init
end
</ruby>

WARNING: Some parts of your application, notably observers and routing, are not yet set up at the point where the +after_initialize+ block is called.

h3. Railsの環境設定

Railsは環境変数を指定することで外面的に動作を変更することもできます。次に挙げる環境変数は、Railsの各部分で解釈されます:

* +ENV['RAILS_ENV']+ はRailsの動作環境(production, development, testなど)を定義します。

* +ENV['RAILS_RELATIVE_URL_ROOT']+ はアプリケーションをサブディレクトリにデプロイした際、ルーチングに利用されます。

* +ENV["RAILS_ASSET_ID"]+ は、ブラウザキャッシュを破棄するためにRailsが使用している、デフォルトのタイムスタンプを上書きします。

* +ENV["RAILS_CACHE_ID"]+ と +ENV["RAILS_APP_VERSION"]+ は、Railsがキャッシュに利用するキーの拡張に用いられます。これにより、キャッシュIDやアプリケーションのバージョンが異なるキャッシュを一つのアプリケーションの中で別々に保持することが可能になります。

* +ENV['RAILS_GEM_VERSION']+ は使用するRailsのGemのバージョンを定義します。 +environment.rb+ の中で +RAILS_GEM_VERSION+ が明示されていない場合に指定します。

h3. Changelog

"Lighthouse ticket":http://rails.lighthouseapp.com/projects/16213-rails-guides/tickets/28

* August 13, 2009: Updated with config syntax and added general configuration options by "John Pignata"
* January 3, 2009: First reasonably complete draft by "Mike Gunderloy":credits.html#mgunderloy
* November 5, 2008: Rough outline by "Mike Gunderloy":credits.html#mgunderloy
